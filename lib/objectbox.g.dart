// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/todo.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2294998394898672492),
      name: 'Todo',
      lastPropertyId: const IdUid(8, 3640931911883728169),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4255321900090682052),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 297108066921444791),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5965112259073419554),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2103342563567020290),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5891546989061092282),
            name: 'done',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2556804652600720355),
            name: 'subTasks',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4192089858556894214),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3640931911883728169),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 2294998394898672492),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Todo: EntityDefinition<Todo>(
        model: _entities[0],
        toOneRelations: (Todo object) => [],
        toManyRelations: (Todo object) => {},
        getId: (Todo object) => object.id,
        setId: (Todo object, int id) {
          object.id = id;
        },
        objectToFB: (Todo object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final dateOffset = fbb.writeString(object.date);
          final timeOffset = fbb.writeString(object.time);
          final subTasksOffset = object.subTasks == null
              ? null
              : fbb.writeList(object.subTasks!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoryOffset = fbb.writeString(object.category);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, dateOffset);
          fbb.addOffset(3, timeOffset);
          fbb.addBool(4, object.done);
          fbb.addOffset(5, subTasksOffset);
          fbb.addOffset(6, categoryOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final subTasksParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final doneParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = Todo(
              time: timeParam,
              id: idParam,
              subTasks: subTasksParam,
              category: categoryParam,
              description: descriptionParam,
              title: titleParam,
              date: dateParam,
              done: doneParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Todo] entity fields to define ObjectBox queries.
class Todo_ {
  /// see [Todo.id]
  static final id = QueryIntegerProperty<Todo>(_entities[0].properties[0]);

  /// see [Todo.title]
  static final title = QueryStringProperty<Todo>(_entities[0].properties[1]);

  /// see [Todo.date]
  static final date = QueryStringProperty<Todo>(_entities[0].properties[2]);

  /// see [Todo.time]
  static final time = QueryStringProperty<Todo>(_entities[0].properties[3]);

  /// see [Todo.done]
  static final done = QueryBooleanProperty<Todo>(_entities[0].properties[4]);

  /// see [Todo.subTasks]
  static final subTasks =
      QueryStringVectorProperty<Todo>(_entities[0].properties[5]);

  /// see [Todo.category]
  static final category = QueryStringProperty<Todo>(_entities[0].properties[6]);

  /// see [Todo.description]
  static final description =
      QueryStringProperty<Todo>(_entities[0].properties[7]);
}
